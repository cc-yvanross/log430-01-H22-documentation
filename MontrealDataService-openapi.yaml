openapi: 3.0.1
info:
  title: MontrealDataSimulationService
  description: |
    Documentation de l'API pour le micro service MontrealDataSimulationService du laboratoire de LOG430. 
    École de Technologie Supérieure - Hiver 2022. 
    En cas de question : **@equipe06** sur discord

    ## Description de l'interface

    Montreal Data Simulation Service est un micro-service responsable du pré-traitement des données des senseurs de traffic de la ville de Montréal.

    La description détaillée des **ressources** (endpoints), **types de données** et de la **gestion des erreurs** pour cette interface est disponible en format OpenAPI ci-dessous: 

    ## Variabilité

    Non-applicable

    ## Attributs de qualité

    #### Disponibilité

    * AQD1 - Montreal Data Simulation Service permet le monitorage de l'état pour tous les microservices enregistrés dans le registre.

    #### Interopérabilité

    * AQI2 - Permet de récupérer la liste de tous les microservices de l'architecture pour favoriser l'interopérabilité des microservices.

    ---

    ## Justification de la conception

    #### Utilisation des standards REST

    Nous avons utilisé les standards REST pour définir les ressources, la structure et la gestion des erreur de cet interface. 

    REST permet de faciliter l'accès aux données en format JSON à l'aide de requêtes HTTP. Il sera donc simple pour les autres équipes de consommer les données de notre interface. 

    Par ailleurs, puisque les ressources sont organisées par routes hiérarchiques, l'ajout de nouvelles fonctionnalités à l'interface est simple, puisqu'il ne suffit que d'ajouter des routes supplémentaires.

    #### Définition des ressources

    Les ressources (endpoints) de l'interface ont été définies dans le but de répondre aux exigences fonctionnelles suivantes:

    * Récupérer la liste de tous les microservices de l'architecture. (CU01-2.a + CU02-1.1)
    * Enregistrer des microservices dans le registre pour pouvoir les surveiller. (AQD1)
    * Récupérer les évennements de l'état d'un microservice. (CU02-2.3)
    * Récupérer l'historique de latence de tous les microservices. (CU02-1.1)

    #### Évolutivité

    Les différentes endpoints de l'interface ont été regroupées par controlleurs afin de mieux séparer les responsabilités de l'API. Ceci nous permet de faciliter la maintenance et l'évolutivité du service.

    Les fonctions de base de l'interface ont été implémentées durant l'itération 1, mais il est possible que d'autres fonctions soient ajoutées dans les itérations subséquentes.

    ## Exemples d'utilisation

    Voir la documentation OpenAPI ci-dessous pour des exemples de requêtes et de réponses pour chaque endpoint.
    
  version: '1.0'
paths:
  /api/info:
    get:
      tags:
        - Api
      summary: Get the API info
      description: This endpoint returns usefull information on the API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfo'
  /api/latency:
    put:
      tags:
        - Api
      summary: Set the API latency
      description: Update the micro-service latency for testing purpose.
      requestBody:
        description: A model containing the latency value
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LatencyWriteModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LatencyWriteModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LatencyWriteModel'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /data/{startDate}/{endDate}/{startLat}/{endLat}:
    get:
      tags:
        - Data
      summary: Returns a list of SensorData between the two specified dates and latitudes
      description: The date format us YYYY-MM-DD.
      parameters:
        - name: startDate
          in: path
          description: The start date
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: path
          description: The end date
          required: true
          schema:
            type: string
            format: date-time
        - name: startLat
          in: path
          description: The start latitude
          required: true
          schema:
            type: number
            format: double
        - name: endLat
          in: path
          description: The end latitude
          required: true
          schema:
            type: number
            format: double
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /data/sensors:
    get:
      tags:
        - Data
      summary: Returns a list of Sensor
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SensorInfo'
  /data/init:
    get:
      tags:
        - Data
      summary: This call will initialize the DB. Should be run only once.
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    ApiInfo:
      type: object
      properties:
        serviceName:
          type: string
          nullable: true
        teamNumber:
          type: integer
          format: int32
        currentLatency:
          type: integer
          format: int32
      additionalProperties: false
    DataModel:
      type: object
      properties:
        detectorId:
          type: integer
          format: int32
        laneId:
          type: integer
          format: int32
        mesureDateTime:
          type: string
          format: date-time
        traficType:
          type: string
          nullable: true
        vehicleCount:
          type: number
          format: double
        avgSpeed:
          type: number
          format: double
      additionalProperties: false
    LatencyWriteModel:
      type: object
      properties:
        latency:
          type: integer
          format: int32
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    SensorInfo:
      type: object
      properties:
        id:
          type: integer
          format: int32
        intersection:
          type: integer
          format: int32
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
      additionalProperties: false
